
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bd  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065e  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000346  00000000  00000000  0000115b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  7a:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_ports>:
};

// Function to initialize ports
void init_ports() {
	// Set rows (PC0 - PC3) as output
	DDRC |= 0x0F;  // 0b00001111
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f 60       	ori	r24, 0x0F	; 15
  86:	84 bb       	out	0x14, r24	; 20

	// Set columns (PC4 - PC6) as input with pull-up resistors
	DDRC &= ~0x70;  // 0b10111111
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	8f 78       	andi	r24, 0x8F	; 143
  8c:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x70;  // 0b01110000
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	80 67       	ori	r24, 0x70	; 112
  92:	85 bb       	out	0x15, r24	; 21

	DDRD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
  98:	8a bb       	out	0x1a, r24	; 26
	
	// Set PortB0 output
	DDRB = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	08 95       	ret

000000a0 <scan_keypad>:
}

// Function to scan keypad and return the pressed key
char scan_keypad() {
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	2c 97       	sbiw	r28, 0x0c	; 12
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	// Keypad layout
	const char keys[4][3] = {
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	e4 e7       	ldi	r30, 0x74	; 116
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <scan_keypad+0x1e>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
		{'*', 0, '#'}
	};

	for (uint8_t row = 0; row < 4; row++) {
		// Drive the current row low and all other rows high
		PORTC = ~(1 << row);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	ac 01       	movw	r20, r24
  d0:	9b 01       	movw	r18, r22
  d2:	08 2e       	mov	r0, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <scan_keypad+0x3a>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <scan_keypad+0x36>
  de:	20 95       	com	r18
  e0:	25 bb       	out	0x15, r18	; 21

		// Check each column
		for (uint8_t col = 0; col < 3; col++) {
			if (!(PINC & (1 << (col + 4)))) {
  e2:	9c 9b       	sbis	0x13, 4	; 19
  e4:	0c c0       	rjmp	.+24     	; 0xfe <scan_keypad+0x5e>
  e6:	9d 9b       	sbis	0x13, 5	; 19
  e8:	06 c0       	rjmp	.+12     	; 0xf6 <scan_keypad+0x56>
  ea:	9e 99       	sbic	0x13, 6	; 19
  ec:	28 c0       	rjmp	.+80     	; 0x13e <scan_keypad+0x9e>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	07 c0       	rjmp	.+14     	; 0x104 <scan_keypad+0x64>
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	03 c0       	rjmp	.+6      	; 0x104 <scan_keypad+0x64>
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <scan_keypad+0x6e>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <scan_keypad+0x6a>
				// Wait for key release
				while (!(PINC & (1 << (col + 4))));
 112:	83 b3       	in	r24, 0x13	; 19
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	82 23       	and	r24, r18
 118:	93 23       	and	r25, r19
 11a:	89 2b       	or	r24, r25
 11c:	d1 f3       	breq	.-12     	; 0x112 <scan_keypad+0x72>

				// Return the corresponding key value
				return keys[row][col];
 11e:	ca 01       	movw	r24, r20
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	48 0f       	add	r20, r24
 126:	59 1f       	adc	r21, r25
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	8c 0f       	add	r24, r28
 12e:	9d 1f       	adc	r25, r29
 130:	48 0f       	add	r20, r24
 132:	59 1f       	adc	r21, r25
 134:	fa 01       	movw	r30, r20
 136:	e6 0f       	add	r30, r22
 138:	f7 1f       	adc	r31, r23
 13a:	80 81       	ld	r24, Z
 13c:	05 c0       	rjmp	.+10     	; 0x148 <scan_keypad+0xa8>
 13e:	01 96       	adiw	r24, 0x01	; 1
		{4, 5, 6},
		{7, 8, 9},
		{'*', 0, '#'}
	};

	for (uint8_t row = 0; row < 4; row++) {
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	91 05       	cpc	r25, r1
 144:	21 f6       	brne	.-120    	; 0xce <scan_keypad+0x2e>
				return keys[row][col];
			}
		}
	}
	// No key pressed
	return '\0';
 146:	80 e0       	ldi	r24, 0x00	; 0
}
 148:	2c 96       	adiw	r28, 0x0c	; 12
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <verify_password>:

int verify_password(char pass[2]){
 15a:	dc 01       	movw	r26, r24
	for (int i = 0; i<10;i++)
	{
		if (pass[0] == passwords[i][0] && pass[1] == passwords[i][1])
 15c:	2c 91       	ld	r18, X
 15e:	e0 e6       	ldi	r30, 0x60	; 96
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	44 e7       	ldi	r20, 0x74	; 116
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	29 13       	cpse	r18, r25
 16a:	06 c0       	rjmp	.+12     	; 0x178 <verify_password+0x1e>
 16c:	11 96       	adiw	r26, 0x01	; 1
 16e:	3c 91       	ld	r19, X
 170:	11 97       	sbiw	r26, 0x01	; 1
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	39 17       	cp	r19, r25
 176:	39 f0       	breq	.+14     	; 0x186 <verify_password+0x2c>
 178:	32 96       	adiw	r30, 0x02	; 2
	// No key pressed
	return '\0';
}

int verify_password(char pass[2]){
	for (int i = 0; i<10;i++)
 17a:	e4 17       	cp	r30, r20
 17c:	f5 07       	cpc	r31, r21
 17e:	99 f7       	brne	.-26     	; 0x166 <verify_password+0xc>
		if (pass[0] == passwords[i][0] && pass[1] == passwords[i][1])
		{
			return 1;
		}
	}
	return 0;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
int verify_password(char pass[2]){
	for (int i = 0; i<10;i++)
	{
		if (pass[0] == passwords[i][0] && pass[1] == passwords[i][1])
		{
			return 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 18a:	08 95       	ret

0000018c <main>:

int main(void) {
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	00 d0       	rcall	.+0      	; 0x192 <main+0x6>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	// Initialize ports
	init_ports();
 196:	0e 94 41 00 	call	0x82	; 0x82 <init_ports>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	87 e8       	ldi	r24, 0x87	; 135
 19c:	93 e1       	ldi	r25, 0x13	; 19
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x12>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x18>
 1a4:	00 00       	nop
		// Scan the keypad
		unsigned char r;
		do
		{
			_delay_ms(20);
			r=PINC&0x0f;
 1a6:	83 b3       	in	r24, 0x13	; 19
		}while(r==0x0f);
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	8f 30       	cpi	r24, 0x0F	; 15
 1ac:	b1 f3       	breq	.-20     	; 0x19a <main+0xe>
		key = scan_keypad();
 1ae:	0e 94 50 00 	call	0xa0	; 0xa0 <scan_keypad>
		
		if (key != '\0') {
 1b2:	88 23       	and	r24, r24
 1b4:	91 f3       	breq	.-28     	; 0x19a <main+0xe>
			// Output the key value to Port B (for demonstration purpose)
			if (key != '#') {
 1b6:	83 32       	cpi	r24, 0x23	; 35
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <main+0x54>
				PORTA <<= 4;
 1ba:	9b b3       	in	r25, 0x1b	; 27
 1bc:	92 95       	swap	r25
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	9b bb       	out	0x1b, r25	; 27
				PORTA |= (PORTD >> 4);
 1c2:	22 b3       	in	r18, 0x12	; 18
 1c4:	9b b3       	in	r25, 0x1b	; 27
 1c6:	22 95       	swap	r18
 1c8:	2f 70       	andi	r18, 0x0F	; 15
 1ca:	92 2b       	or	r25, r18
 1cc:	9b bb       	out	0x1b, r25	; 27
				PORTD <<= 4;
 1ce:	92 b3       	in	r25, 0x12	; 18
 1d0:	92 95       	swap	r25
 1d2:	90 7f       	andi	r25, 0xF0	; 240
 1d4:	92 bb       	out	0x12, r25	; 18
				PORTD |= (key & 0x0F); // Ensure key is masked correctly
 1d6:	92 b3       	in	r25, 0x12	; 18
 1d8:	8f 70       	andi	r24, 0x0F	; 15
 1da:	89 2b       	or	r24, r25
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <main+0x6a>
				} else {
				char pass[2];
				pass[0] = PORTA; // Assume PORTA holds the higher byte
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	89 83       	std	Y+1, r24	; 0x01
				pass[1] = PORTD; // Assume PORTD holds the lower byte
 1e4:	82 b3       	in	r24, 0x12	; 18
 1e6:	8a 83       	std	Y+2, r24	; 0x02
				if (verify_password(pass))
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0e 94 ad 00 	call	0x15a	; 0x15a <verify_password>
 1f0:	89 2b       	or	r24, r25
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <main+0x6a>
				PORTB |= 1; // Turn on PORTB pin 0 if password is verified
 1f4:	c0 9a       	sbi	0x18, 0	; 24
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x6e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x74>
 200:	00 00       	nop
 202:	cb cf       	rjmp	.-106    	; 0x19a <main+0xe>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
